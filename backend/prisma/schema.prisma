generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Pessoa {
  id                  String   @id @default(uuid())
  nome                String
  contato             String?  // pode ser removido se usar apenas telefone
  dataNascimento      String
  cpf                 String?
  identidade          String?  // mapeia para 'rg' no JSON
  naturalidade        String?
  genero              String?  // não está no JSON mas pode ser útil
  escolaridade        Int?     
  serie               Int?     
  estadoCivil         Int?
  situacaoProfissional Int?
  salario             String?
  enderecoId          String?
  telefone            String?
  cartaoSus           String?
  respPrincipal       Int?     // novo campo (1 = responsável principal)
  profissao           String?  // novo campo

  endereco            Endereco? @relation(fields: [enderecoId], references: [id])
  paciente            Paciente? @relation("PessoaPaciente")
}

model Endereco {
  id          String  @id @default(uuid())
  cep         String
  logradouro  String
  numero      String
  complemento String  // corrigi o nome (estava "complemento" no JSON)
  unidade     String? // marcado como opcional
  bairro      String
  localidade  String
  uf          String
  estado      String  // equivalente a "Santa Catarina" no JSON
  regiao      String? // marcado como opcional
  referencia  String? // marcado como opcional
  pais        String? @default("Brasil") // opcional com valor padrão

  pessoas     Pessoa[] // relação inversa
}

model Paciente {
  id                     String   @id @default(uuid())
  pessoaId               String   @unique
  pessoa                 Pessoa   @relation("PessoaPaciente", fields: [pessoaId], references: [id])
  status                 Boolean? // true no JSON
  nomeMae                String?  // "Maria Aparecida Cardoso" no JSON
  nomePai                String?  // "Valdir Jorge Antonio" no JSON
  nomeOutro              String?  // "Marina Medeiros Vicente" no JSON
  remuneracao            String?  // "3000" no JSON (mantido como String)
  recebeBpc              Int?     // 1 no JSON (equivalente a bpc no JSON)
  valorBpc               String?  // "3000" no JSON
  aptoReceberBpc         Int?     // 1 no JSON (novo campo)
  tipoEscola             Int?     // 1 no JSON (novo campo)
  escolaNome             String?  // "E.E.B Ignacio Stakowski" no JSON
  // Campos existentes não presentes no JSON:
  recebeRemuneracao      Int?     
  diagnostico            String?
  profissionalResponsavel String?
  origenInfoOng          String?
  observacoes            String[]
  responsavelId          String?
  conjugeResponsavelId   String?
  outroResponsavelId     String?

  // Relacionamentos (mantidos):
  entrevistas            Entrevista[]
  historicoSaude         HistoricoSaude[]
  quimioterapias         Quimioterapia[]
  radioterapias          RadioTerapia[]
  tratamentos            Tratamento[]
  composicaoFamiliar     ComposicaoFamiliar[]
  cirurgias              Cirurgia[]
  profissionais          ProfissionalResponsavel[]
  cras                   Cras?
  ubs                    Ubs?
}

model Entrevista {
  id              String  @id @default(uuid())
  pacienteId      String
  entrevistadoId  String?
  cidade          String?
  data            String?
  como_soube      String?
  observacoes     String?
  entrevistador   String?

  paciente        Paciente @relation(fields: [pacienteId], references: [id])
}

model HistoricoSaude {
  id                      String    @id @default(uuid())
  pacienteId              String
  recebeBeneficio         Int?      @map("recebe_beneficio")
  beneficioDescricao      String?   @map("beneficio_descricao")
  medicamentosUsoContinuo String?   @map("medicamentos_uso_continuo")
  localProcuraAtendimento Int[]     @map("local_procura_atendimento") @default([])
  doencasFamilia          Int[]     @default([])

  paciente                Paciente  @relation(fields: [pacienteId], references: [id])
}

model Quimioterapia {
  id               String  @id @default(uuid())
  pacienteId       String
  dataInicio       String?
  dataUltimaSessao String?

  paciente         Paciente @relation(fields: [pacienteId], references: [id])
}

model RadioTerapia {
  id               String  @id @default(uuid())
  pacienteId       String
  dataInicio       String?
  dataUltimaSessao String?

  paciente         Paciente @relation(fields: [pacienteId], references: [id])
}

model Tratamento {
  id                 String  @id @default(uuid())
  pacienteId         String
  tipo               String?
  data_inicio        String?
  data_ultima_sessao String?
  observacoes        String?
  outros_tratamentos String?

  paciente           Paciente @relation(fields: [pacienteId], references: [id])
}

model ProfissionalResponsavel {
  id         String  @id @default(uuid())
  pacienteId String
  tipo       String?
  nome       String
  crm        String?

  paciente   Paciente @relation(fields: [pacienteId], references: [id])
}

model Cirurgia {
  id          String  @id @default(uuid())
  pacienteId  String
  nome        String?
  data        String?
  cid   String?

  paciente    Paciente @relation(fields: [pacienteId], references: [id])
}

model ComposicaoFamiliar {
  id              String  @id @default(uuid())
  pacienteId      String
  nome            String?
  parentesco      String?
  data_nascimento String?
  estudaOpc       Int?
  escolaridade    String?
  trabalhaOpc     Int?
  renda           String?
  idade           Int?

  paciente        Paciente @relation(fields: [pacienteId], references: [id])
}

model SituacaoHabitacional {
  id                 String   @id @default(uuid())
  responsavelId      String?
  
  // Campos do JSON (nomes equivalentes):
  comoAdquiriuCasa   Int?     // 4 no JSON
  area               Int?     // 1 no JSON (alterado de String para Int)
  numeroComodos      Int?     // 12 no JSON (novo campo)
  material           Int?     // 0 no JSON (novo campo)
  bens               Int[]    // [0, 1] no JSON (alterado de bens_imovel String para Int[])
  meioDeTransporte   Int?     // 0 no JSON (alterado de meios_transporte String)
  meioDeComunicacao  Int?     // 0 no JSON (alterado de meios_comunicacao String)
  possuiBanheiros    Int?     // 0 no JSON (alterado de possui_banheiro Boolean)
  
  // Campos não presentes no JSON (para remover ou manter como opcionais):
  tipoMoradia        String?  // equivalente a tipo_moradia (opcional)
  propriedade        Boolean? // não está no JSON
  caracteristicas    String?  // não está no JSON
  eletrodomesticos   String?  // não está no JSON
  dentroDeCasa       Boolean? // equivalente a dentro_de_casa (opcional)
  destinoLixo        String?  // equivalente a destino_lixo (opcional)
  tipoAgua           String?  // equivalente a tipo_agua (opcional)
  valorTotal         String?  // equivalente a valor_total (opcional)
}

model Ubs {
  id               String  @id @default(uuid())
  paciente         Paciente? @relation(fields: [pacienteId], references: [id])
  pacienteId       String? @unique  // Torna opcional
  municipio        String?
  bairro           String?

}

model Cras {
  id               String  @id @default(uuid())
  paciente         Paciente? @relation(fields: [pacienteId], references: [id])
  pacienteId       String? @unique  // Torna opcional

  municipio        String?
  bairro           String?

}