generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  name      String
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Pessoa {
  id              String   @id @default(uuid())
  nome            String
  contato         String?
  dataNascimento  String
  cpf             String?
  identidade      String?
  naturalidade    String?
  genero          String?
  escolaridade    String?
  estadoCivil     Int?
  situacaoProfissional Int?
  salario         String?
  enderecoId      String?
  telefone        String?
  cartaoSus       String?

  endereco        Endereco? @relation(fields: [enderecoId], references: [id])
  paciente        Paciente? @relation("PessoaPaciente")
}

model Endereco {
  id          String  @id @default(uuid())
  cep         String
  logradouro  String
  numero      String
  complemento String
  unidade     String
  bairro      String
  estado      String
  uf          String
  regiao      String
  localidade  String
  referencia  String
  pais        String?

  pessoas     Pessoa[] // relação inversa
}

model Paciente {
  id                     String   @id @default(uuid())
  pessoaId               String   @unique
  pessoa                 Pessoa   @relation("PessoaPaciente", fields: [pessoaId], references: [id])
  status                 Boolean?
  nomeMae                String?
  nomePai                String?
  nomeOutro              String?
  recebeRemuneracao      Int?
  remuneracao            String?
  recebeBpc              Int?
  valorBpc               String?
  diagnostico            String?
  profissionalResponsavel String?
  escolaNome             String?
  anoEscolar             String?
  tamRoupa               String?
  tamCalcado             String?
  origenInfoOng          String?
  observacoes            String[] // usar @db.Text[] se for PostgreSQL
  responsavelId          String?
  conjugeResponsavelId   String?
  outroResponsavelId     String?

  entrevistas            Entrevista[]
  historicoSaude         HistoricoSaude[]
  quimioterapias         Quimioterapia[]
  radioterapias          RadioTerapia[]
  tratamentos            Tratamento[]
  composicaoFamiliar     ComposicaoFamiliar[]
  cirurgias              Cirurgia[]
  profissionais          ProfissionalResponsavel[]
}

model Entrevista {
  id              String  @id @default(uuid())
  pacienteId      String
  entrevistadoId  String?
  cidade          String?
  data            String?
  como_soube      String?
  observacoes     String?
  entrevistador   String?

  paciente        Paciente @relation(fields: [pacienteId], references: [id])
}

model HistoricoSaude {
  id                       String   @id @default(uuid())
  pacienteId               String
  recebe_beneficio         Int?
  beneficio_descricao      String?
  medicamentos_uso_continuo String?
  local_procura_atendimento Int[]
  doencasFamilia           Int[]

  paciente                 Paciente @relation(fields: [pacienteId], references: [id])
}

model Quimioterapia {
  id               String  @id @default(uuid())
  pacienteId       String
  dataInicio       String?
  dataUltimaSessao String?

  paciente         Paciente @relation(fields: [pacienteId], references: [id])
}

model RadioTerapia {
  id               String  @id @default(uuid())
  pacienteId       String
  dataInicio       String?
  dataUltimaSessao String?

  paciente         Paciente @relation(fields: [pacienteId], references: [id])
}

model Tratamento {
  id                 String  @id @default(uuid())
  pacienteId         String
  tipo               String?
  data_inicio        String?
  data_ultima_sessao String?
  observacoes        String?
  outros_tratamentos String?

  paciente           Paciente @relation(fields: [pacienteId], references: [id])
}

model ProfissionalResponsavel {
  id         String  @id @default(uuid())
  pacienteId String
  tipo       String?
  nome       String
  crm        String?

  paciente   Paciente @relation(fields: [pacienteId], references: [id])
}

model Cirurgia {
  id          String  @id @default(uuid())
  pacienteId  String
  nome        String?
  data        String?
  descricao   String?

  paciente    Paciente @relation(fields: [pacienteId], references: [id])
}

model ComposicaoFamiliar {
  id              String  @id @default(uuid())
  pacienteId      String
  nome            String?
  parentesco      String?
  data_nascimento String?
  estudaOpc       Int?
  escolaridade    String?
  trabalhaOpc     Int?
  renda           String?
  idade           Int?

  paciente        Paciente @relation(fields: [pacienteId], references: [id])
}

model SituacaoHabitacional {
  id                 String  @id @default(uuid())
  responsavelId      String?
  tipo_moradia       String?
  propriedade        Boolean?
  area               String?
  caracteristicas    String?
  eletrodomesticos   String?
  bens_imovel        String?
  meios_transporte   String?
  meios_comunicacao  String?
  possui_banheiro    Boolean?
  dentro_de_casa     Boolean?
  destino_lixo       String?
  tipo_agua          String?
  valor_total        String?
}